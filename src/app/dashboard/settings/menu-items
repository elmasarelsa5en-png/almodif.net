'use client';

import React, { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import * as XLSX from 'xlsx';
import Tesseract from 'tesseract.js';
import {
  ArrowLeft,
  Plus,
  Edit2,
  Trash2,
  Upload,
  Coffee,
  Utensils,
  Shirt,
  Image as ImageIcon,
  FileSpreadsheet,
  Camera,
  Check,
  X,
  Loader2,
  Search,
  Filter,
  AlertCircle,
  CheckCircle,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

interface MenuItem {
  id: string;
  name: string;
  nameAr: string;
  price: number;
  category: 'coffee' | 'restaurant' | 'laundry';
  subCategory?: string;
  description?: string;
  image?: string;
  available: boolean;
  createdAt: string;
}

const CATEGORIES = [
  { value: 'coffee', label: 'كوفي شوب', icon: Coffee, color: 'amber' },
  { value: 'restaurant', label: 'مطعم', icon: Utensils, color: 'orange' },
  { value: 'laundry', label: 'مغسلة', icon: Shirt, color: 'blue' },
];

const SUB_CATEGORIES = {
  coffee: ['مشروبات ساخنة', 'مشروبات باردة', 'حلويات', 'وجبات خفيفة'],
  restaurant: ['مقبلات', 'أطباق رئيسية', 'حلويات', 'مشروبات', 'سلطات'],
  laundry: ['ملابس', 'مفروشات', 'خدمات خاصة'],
};

export default function MenuItemsPage() {
  const router = useRouter();
  const [items, setItems] = useState<MenuItem[]>([]);
  const [filteredItems, setFilteredItems] = useState<MenuItem[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [categoryFilter, setCategoryFilter] = useState<string>('all');
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingItem, setEditingItem] = useState<MenuItem | null>(null);
  const [loading, setLoading] = useState(false);
  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);
  
  // Upload states
  const [uploadType, setUploadType] = useState<'excel' | 'image' | null>(null);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [uploadStatus, setUploadStatus] = useState<'idle' | 'processing' | 'success' | 'error'>('idle');
  const [uploadMessage, setUploadMessage] = useState('');
  const [extractedItems, setExtractedItems] = useState<Partial<MenuItem>[]>([]);
  const [previewImage, setPreviewImage] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const [formData, setFormData] = useState({
    name: '',
    nameAr: '',
    price: '',
    category: 'coffee' as 'coffee' | 'restaurant' | 'laundry',
    subCategory: '',
    description: '',
    image: '',
    available: true,
  });

  // Load items from localStorage
  useEffect(() => {
    loadItems();
  }, []);

  // Filter items
  useEffect(() => {
    let filtered = items;

    if (categoryFilter !== 'all') {
      filtered = filtered.filter((item) => item.category === categoryFilter);
    }

    if (searchTerm) {
      filtered = filtered.filter(
        (item) =>
          item.nameAr.toLowerCase().includes(searchTerm.toLowerCase()) ||
          item.name.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    setFilteredItems(filtered);
  }, [items, categoryFilter, searchTerm]);

  const loadItems = () => {
    try {
      // تحميل من localStorage
      const coffeeItems = JSON.parse(localStorage.getItem('coffee_menu') || '[]');
      const restaurantItems = JSON.parse(localStorage.getItem('restaurant_menu') || '[]');
      const laundryItems = JSON.parse(localStorage.getItem('laundry_services') || '[]');

      const allItems: MenuItem[] = [
        ...coffeeItems.map((item: any) => ({ ...item, category: 'coffee' as const })),
        ...restaurantItems.map((item: any) => ({ ...item, category: 'restaurant' as const })),
        ...laundryItems.map((item: any) => ({ ...item, category: 'laundry' as const })),
      ];

      setItems(allItems);
    } catch (error) {
      console.error('Error loading items:', error);
    }
  };

  const handleSave = () => {
    if (!formData.nameAr || !formData.price) {
      alert('الرجاء إدخال اسم الصنف والسعر');
      return;
    }

    setLoading(true);

    try {
      const newItem: MenuItem = {
        id: editingItem?.id || `item-${Date.now()}`,
        name: formData.name || formData.nameAr,
        nameAr: formData.nameAr,
        price: parseFloat(formData.price),
        category: formData.category,
        subCategory: formData.subCategory || undefined,
        description: formData.description || undefined,
        image: formData.image || undefined,
        available: formData.available,
        createdAt: editingItem?.createdAt || new Date().toISOString(),
      };

      // حفظ في localStorage حسب الفئة
      const storageKey = {
        coffee: 'coffee_menu',
        restaurant: 'restaurant_menu',
        laundry: 'laundry_services',
      }[formData.category];

      const existingItems = JSON.parse(localStorage.getItem(storageKey) || '[]');

      if (editingItem) {
        // تحديث
        const updatedItems = existingItems.map((item: any) =>
          item.id === editingItem.id ? newItem : item
        );
        localStorage.setItem(storageKey, JSON.stringify(updatedItems));
      } else {
        // إضافة جديد
        localStorage.setItem(storageKey, JSON.stringify([...existingItems, newItem]));
      }

      // إعادة تحميل القائمة
      loadItems();

      // إغلاق النافذة
      setIsDialogOpen(false);
      resetForm();
    } catch (error) {
      console.error('Error saving item:', error);
      alert('حدث خطأ أثناء الحفظ');
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = (item: MenuItem) => {
    if (!confirm(`هل أنت متأكد من حذف "${item.nameAr}"؟`)) return;

    const storageKey = {
      coffee: 'coffee_menu',
      restaurant: 'restaurant_menu',
      laundry: 'laundry_services',
    }[item.category];

    const existingItems = JSON.parse(localStorage.getItem(storageKey) || '[]');
    const updatedItems = existingItems.filter((i: any) => i.id !== item.id);
    localStorage.setItem(storageKey, JSON.stringify(updatedItems));

    loadItems();
  };

  const handleEdit = (item: MenuItem) => {
    setEditingItem(item);
    setFormData({
      name: item.name,
      nameAr: item.nameAr,
      price: item.price.toString(),
      category: item.category,
      subCategory: item.subCategory || '',
      description: item.description || '',
      image: item.image || '',
      available: item.available,
    });
    setIsDialogOpen(true);
  };

  const resetForm = () => {
    setEditingItem(null);
    setFormData({
      name: '',
      nameAr: '',
      price: '',
      category: 'coffee',
      subCategory: '',
      description: '',
      image: '',
      available: true,
    });
  };

  const getCategoryIcon = (category: string) => {
    const cat = CATEGORIES.find((c) => c.value === category);
    const Icon = cat?.icon || Coffee;
    return <Icon className="h-5 w-5" />;
  };

  const getCategoryColor = (category: string) => {
    const cat = CATEGORIES.find((c) => c.value === category);
    return cat?.color || 'gray';
  };

  // Handle Excel Upload
  const handleExcelUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setUploadStatus('processing');
    setUploadMessage('جاري معالجة ملف Excel...');
    setUploadProgress(20);

    try {
      const data = await file.arrayBuffer();
      const workbook = XLSX.read(data);
      const worksheet = workbook.Sheets[workbook.SheetNames[0]];
      const jsonData = XLSX.utils.sheet_to_json(worksheet);

      setUploadProgress(50);

      const extracted: Partial<MenuItem>[] = jsonData.map((row: any, index: number) => {
        // دعم عدة أسماء للأعمدة
        const nameAr = row['الاسم'] || row['اسم الصنف'] || row['nameAr'] || row['الصنف'] || '';
        const name = row['Name'] || row['name'] || row['الاسم بالانجليزي'] || nameAr;
        const price = parseFloat(row['السعر'] || row['Price'] || row['price'] || '0');
        const category = (row['الفئة'] || row['Category'] || row['category'] || 'coffee').toLowerCase();
        const subCategory = row['التصنيف الفرعي'] || row['SubCategory'] || row['subCategory'] || '';
        const description = row['الوصف'] || row['Description'] || row['description'] || '';
        const image = row['الصورة'] || row['Image'] || row['image'] || '';

        // تحديد الفئة تلقائياً من الاسم إذا لم تكن محددة
        let autoCategory: 'coffee' | 'restaurant' | 'laundry' = 'coffee';
        const lowerName = nameAr.toLowerCase();
        
        if (lowerName.includes('شاي') || lowerName.includes('قهوة') || lowerName.includes('كابتشينو') || 
            lowerName.includes('لاتيه') || lowerName.includes('عصير') || lowerName.includes('مشروب')) {
          autoCategory = 'coffee';
        } else if (lowerName.includes('برجر') || lowerName.includes('بيتزا') || lowerName.includes('مكرونة') ||
                   lowerName.includes('دجاج') || lowerName.includes('لحم') || lowerName.includes('سلطة') ||
                   lowerName.includes('شوربة') || lowerName.includes('مقبلات') || lowerName.includes('طبق')) {
          autoCategory = 'restaurant';
        } else if (lowerName.includes('غسيل') || lowerName.includes('كوي') || lowerName.includes('ثوب') ||
                   lowerName.includes('بنطلون') || lowerName.includes('فستان') || lowerName.includes('ملابس') ||
                   lowerName.includes('مفرش') || lowerName.includes('ستارة')) {
          autoCategory = 'laundry';
        }

        return {
          id: `excel-${Date.now()}-${index}`,
          nameAr,
          name: name || nameAr,
          price,
          category: ['coffee', 'restaurant', 'laundry'].includes(category) ? category as any : autoCategory,
          subCategory: subCategory || undefined,
          description: description || undefined,
          image: image || undefined,
          available: true,
          createdAt: new Date().toISOString(),
        };
      });

      setExtractedItems(extracted);
      setUploadProgress(100);
      setUploadStatus('success');
      setUploadMessage(`تم استخراج ${extracted.length} صنف بنجاح من ملف Excel!`);
    } catch (error) {
      console.error('Excel parsing error:', error);
      setUploadStatus('error');
      setUploadMessage('حدث خطأ في قراءة ملف Excel. تأكد من صحة الملف وأعمدته.');
      setUploadProgress(0);
    }
  };

  // Handle Image OCR
  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setUploadStatus('processing');
    setUploadMessage('جاري مسح الصورة واستخراج النصوص...');
    setUploadProgress(10);

    try {
      // عرض معاينة الصورة
      const reader = new FileReader();
      reader.onload = (e) => {
        setPreviewImage(e.target?.result as string);
      };
      reader.readAsDataURL(file);

      setUploadProgress(30);

      // استخدام Tesseract لاستخراج النص
      const { data: { text } } = await Tesseract.recognize(
        file,
        'ara+eng', // دعم العربية والإنجليزية
        {
          logger: (m) => {
            if (m.status === 'recognizing text') {
              setUploadProgress(30 + (m.progress * 50));
            }
          },
        }
      );

      setUploadProgress(85);

      // تحليل النص المستخرج
      const lines = text.split('\n').filter(line => line.trim());
      const extracted: Partial<MenuItem>[] = [];

      for (const line of lines) {
        // البحث عن أنماط السعر (مثل: 25 ر.س أو 25 SAR أو 25.00)
        const priceMatch = line.match(/(\d+(?:\.\d{1,2})?)\s*(?:ر\.س|SAR|SR|ريال)?/);
        
        if (priceMatch) {
          const price = parseFloat(priceMatch[1]);
          // استخراج الاسم (كل النص قبل السعر)
          const nameAr = line.substring(0, line.indexOf(priceMatch[0])).trim();
          
          if (nameAr && price > 0) {
            // تحديد الفئة تلقائياً
            let category: 'coffee' | 'restaurant' | 'laundry' = 'coffee';
            const lowerName = nameAr.toLowerCase();
            
            if (lowerName.includes('شاي') || lowerName.includes('قهوة') || lowerName.includes('كابتشينو') || 
                lowerName.includes('لاتيه') || lowerName.includes('عصير') || lowerName.includes('مشروب')) {
              category = 'coffee';
            } else if (lowerName.includes('برجر') || lowerName.includes('بيتزا') || lowerName.includes('مكرونة') ||
                       lowerName.includes('دجاج') || lowerName.includes('لحم') || lowerName.includes('سلطة') ||
                       lowerName.includes('شوربة') || lowerName.includes('مقبلات') || lowerName.includes('طبق')) {
              category = 'restaurant';
            } else if (lowerName.includes('غسيل') || lowerName.includes('كوي') || lowerName.includes('ثوب') ||
                       lowerName.includes('بنطلون') || lowerName.includes('فستان') || lowerName.includes('ملابس') ||
                       lowerName.includes('مفرش') || lowerName.includes('ستارة')) {
              category = 'laundry';
            }

            extracted.push({
              id: `ocr-${Date.now()}-${extracted.length}`,
              nameAr,
              name: nameAr,
              price,
              category,
              available: true,
              createdAt: new Date().toISOString(),
            });
          }
        }
      }

      setExtractedItems(extracted);
      setUploadProgress(100);
      
      if (extracted.length > 0) {
        setUploadStatus('success');
        setUploadMessage(`تم استخراج ${extracted.length} صنف من الصورة!`);
      } else {
        setUploadStatus('error');
        setUploadMessage('لم يتم العثور على أصناف في الصورة. تأكد من وضوح الصورة.');
      }
    } catch (error) {
      console.error('OCR error:', error);
      setUploadStatus('error');
      setUploadMessage('حدث خطأ في معالجة الصورة. حاول مرة أخرى.');
      setUploadProgress(0);
    }
  };

  // Save extracted items
  const handleSaveExtractedItems = () => {
    if (extractedItems.length === 0) return;

    setLoading(true);

    try {
      // تجميع الأصناف حسب الفئة
      const itemsByCategory = {
        coffee: [] as MenuItem[],
        restaurant: [] as MenuItem[],
        laundry: [] as MenuItem[],
      };

      extractedItems.forEach((item) => {
        if (item.category && item.nameAr && item.price) {
          itemsByCategory[item.category].push(item as MenuItem);
        }
      });

      // حفظ في localStorage
      Object.entries(itemsByCategory).forEach(([category, items]) => {
        if (items.length > 0) {
          const storageKey = {
            coffee: 'coffee_menu',
            restaurant: 'restaurant_menu',
            laundry: 'laundry_services',
          }[category];

          const existingItems = JSON.parse(localStorage.getItem(storageKey) || '[]');
          localStorage.setItem(storageKey, JSON.stringify([...existingItems, ...items]));
        }
      });

      // إعادة تحميل القائمة
      loadItems();

      // إغلاق النافذة
      setUploadDialogOpen(false);
      resetUploadState();

      alert(`تم إضافة ${extractedItems.length} صنف بنجاح!`);
    } catch (error) {
      console.error('Error saving extracted items:', error);
      alert('حدث خطأ أثناء الحفظ');
    } finally {
      setLoading(false);
    }
  };

  // Reset upload state
  const resetUploadState = () => {
    setUploadType(null);
    setUploadProgress(0);
    setUploadStatus('idle');
    setUploadMessage('');
    setExtractedItems([]);
    setPreviewImage(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  // Open upload dialog
  const handleOpenUpload = (type: 'excel' | 'image') => {
    setUploadType(type);
    setUploadDialogOpen(true);
    resetUploadState();
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Button
              variant="ghost"
              size="icon"
              onClick={() => router.back()}
              className="text-white hover:bg-white/10"
            >
              <ArrowLeft className="h-5 w-5" />
            </Button>
            <div>
              <h1 className="text-3xl font-bold text-white">إدارة الأصناف والقوائم</h1>
              <p className="text-purple-200 mt-1">
                إدارة مركزية لجميع أصناف الكوفي والمطعم والمغسلة
              </p>
            </div>
          </div>
          <div className="flex gap-2">
            <Button
              onClick={() => setUploadDialogOpen(true)}
              className="bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700"
            >
              <Upload className="h-4 w-4 mr-2" />
              استيراد من ملف
            </Button>
            <Button
              onClick={() => {
                resetForm();
                setIsDialogOpen(true);
              }}
              className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
            >
              <Plus className="h-4 w-4 mr-2" />
              إضافة صنف
            </Button>
          </div>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Card className="bg-white/10 border-white/20">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm text-purple-200">إجمالي الأصناف</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-3xl font-bold text-white">{items.length}</p>
            </CardContent>
          </Card>
          {CATEGORIES.map((cat) => {
            const Icon = cat.icon;
            const count = items.filter((i) => i.category === cat.value).length;
            return (
              <Card key={cat.value} className="bg-white/10 border-white/20">
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm text-purple-200 flex items-center gap-2">
                    <Icon className="h-4 w-4" />
                    {cat.label}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-3xl font-bold text-white">{count}</p>
                </CardContent>
              </Card>
            );
          })}
        </div>

        {/* Filters */}
        <Card className="bg-white/10 border-white/20">
          <CardContent className="pt-6">
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                  <Input
                    placeholder="بحث عن صنف..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pr-10 bg-white/5 border-white/20 text-white"
                  />
                </div>
              </div>
              <Select value={categoryFilter} onValueChange={setCategoryFilter}>
                <SelectTrigger className="w-full md:w-[200px] bg-white/5 border-white/20 text-white">
                  <SelectValue placeholder="جميع الفئات" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">جميع الفئات</SelectItem>
                  {CATEGORIES.map((cat) => (
                    <SelectItem key={cat.value} value={cat.value}>
                      {cat.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* Items Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
          {filteredItems.map((item) => (
            <Card key={item.id} className="bg-white/10 border-white/20 hover:bg-white/15 transition-all">
              <CardContent className="p-4">
                {/* Image */}
                {item.image && (
                  <div className="w-full h-32 bg-white/5 rounded-lg mb-3 overflow-hidden">
                    <img
                      src={item.image}
                      alt={item.nameAr}
                      className="w-full h-full object-cover"
                    />
                  </div>
                )}
                {!item.image && (
                  <div className="w-full h-32 bg-white/5 rounded-lg mb-3 flex items-center justify-center">
                    <ImageIcon className="h-12 w-12 text-white/20" />
                  </div>
                )}

                {/* Category Badge */}
                <div className="flex items-center gap-2 mb-2">
                  <Badge className={`bg-${getCategoryColor(item.category)}-500/20 text-${getCategoryColor(item.category)}-300`}>
                    {getCategoryIcon(item.category)}
                    <span className="mr-1">{CATEGORIES.find(c => c.value === item.category)?.label}</span>
                  </Badge>
                  {!item.available && (
                    <Badge className="bg-red-500/20 text-red-300">
                      غير متاح
                    </Badge>
                  )}
                </div>

                {/* Name */}
                <h3 className="text-white font-semibold text-lg mb-1">{item.nameAr}</h3>
                {item.subCategory && (
                  <p className="text-purple-200 text-sm mb-2">{item.subCategory}</p>
                )}

                {/* Price */}
                <div className="flex items-center justify-between mb-3">
                  <span className="text-2xl font-bold text-green-400">
                    {item.price.toFixed(2)} ر.س
                  </span>
                </div>

                {/* Actions */}
                <div className="flex gap-2">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => handleEdit(item)}
                    className="flex-1 border-white/20 text-white hover:bg-white/10"
                  >
                    <Edit2 className="h-3 w-3 mr-1" />
                    تعديل
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => handleDelete(item)}
                    className="border-red-500/50 text-red-300 hover:bg-red-500/20"
                  >
                    <Trash2 className="h-3 w-3" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {filteredItems.length === 0 && (
          <Card className="bg-white/10 border-white/20">
            <CardContent className="py-12 text-center">
              <ImageIcon className="h-16 w-16 text-white/20 mx-auto mb-4" />
              <p className="text-white/60 text-lg">لا توجد أصناف</p>
              <p className="text-white/40 text-sm mt-2">ابدأ بإضافة أصناف جديدة</p>
            </CardContent>
          </Card>
        )}
      </div>

      {/* Add/Edit Dialog */}
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="bg-slate-900 text-white border-white/20 max-w-2xl">
          <DialogHeader>
            <DialogTitle className="text-2xl">
              {editingItem ? 'تعديل صنف' : 'إضافة صنف جديد'}
            </DialogTitle>
            <DialogDescription className="text-gray-400">
              أدخل تفاصيل الصنف وسيتم إضافته تلقائياً للقسم المناسب
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            {/* Category */}
            <div>
              <Label className="text-white mb-2 block">القسم</Label>
              <Select
                value={formData.category}
                onValueChange={(value: any) =>
                  setFormData({ ...formData, category: value, subCategory: '' })
                }
              >
                <SelectTrigger className="bg-white/5 border-white/20 text-white">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {CATEGORIES.map((cat) => {
                    const Icon = cat.icon;
                    return (
                      <SelectItem key={cat.value} value={cat.value}>
                        <div className="flex items-center gap-2">
                          <Icon className="h-4 w-4" />
                          {cat.label}
                        </div>
                      </SelectItem>
                    );
                  })}
                </SelectContent>
              </Select>
            </div>

            {/* Sub Category */}
            <div>
              <Label className="text-white mb-2 block">التصنيف الفرعي (اختياري)</Label>
              <Select
                value={formData.subCategory}
                onValueChange={(value) => setFormData({ ...formData, subCategory: value })}
              >
                <SelectTrigger className="bg-white/5 border-white/20 text-white">
                  <SelectValue placeholder="اختر التصنيف..." />
                </SelectTrigger>
                <SelectContent>
                  {SUB_CATEGORIES[formData.category].map((sub) => (
                    <SelectItem key={sub} value={sub}>
                      {sub}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Name Arabic */}
            <div>
              <Label className="text-white mb-2 block">اسم الصنف (عربي)</Label>
              <Input
                value={formData.nameAr}
                onChange={(e) => setFormData({ ...formData, nameAr: e.target.value })}
                placeholder="مثال: شاي، غسيل ثوب، برجر..."
                className="bg-white/5 border-white/20 text-white"
              />
            </div>

            {/* Name English */}
            <div>
              <Label className="text-white mb-2 block">اسم الصنف (إنجليزي) - اختياري</Label>
              <Input
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                placeholder="Tea, Laundry, Burger..."
                className="bg-white/5 border-white/20 text-white"
              />
            </div>

            {/* Price */}
            <div>
              <Label className="text-white mb-2 block">السعر (ر.س)</Label>
              <Input
                type="number"
                step="0.01"
                value={formData.price}
                onChange={(e) => setFormData({ ...formData, price: e.target.value })}
                placeholder="25.00"
                className="bg-white/5 border-white/20 text-white"
              />
            </div>

            {/* Description */}
            <div>
              <Label className="text-white mb-2 block">الوصف (اختياري)</Label>
              <Input
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="وصف مختصر للصنف..."
                className="bg-white/5 border-white/20 text-white"
              />
            </div>

            {/* Image URL */}
            <div>
              <Label className="text-white mb-2 block">رابط الصورة (اختياري)</Label>
              <Input
                value={formData.image}
                onChange={(e) => setFormData({ ...formData, image: e.target.value })}
                placeholder="https://example.com/image.jpg"
                className="bg-white/5 border-white/20 text-white"
              />
            </div>

            {/* Available */}
            <div className="flex items-center gap-2">
              <input
                type="checkbox"
                id="available"
                checked={formData.available}
                onChange={(e) => setFormData({ ...formData, available: e.target.checked })}
                className="w-4 h-4"
              />
              <Label htmlFor="available" className="text-white">
                الصنف متاح للطلب
              </Label>
            </div>
          </div>

          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setIsDialogOpen(false)}
              className="border-white/20 text-white hover:bg-white/10"
            >
              إلغاء
            </Button>
            <Button
              onClick={handleSave}
              disabled={loading}
              className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
            >
              {loading ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  جاري الحفظ...
                </>
              ) : (
                <>
                  <Check className="h-4 w-4 mr-2" />
                  حفظ
                </>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Upload Dialog - نسخة احترافية كاملة */}
      <Dialog open={uploadDialogOpen} onOpenChange={(open) => {
        setUploadDialogOpen(open);
        if (!open) resetUploadState();
      }}>
        <DialogContent className="bg-slate-900 text-white border-white/20 max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="text-2xl">استيراد الأصناف</DialogTitle>
            <DialogDescription className="text-gray-400">
              اختر طريقة الاستيراد: رفع ملف Excel أو مسح صورة للمينيو
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-6">
            {/* Selection buttons */}
            {!uploadType && uploadStatus === 'idle' && (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Button
                  onClick={() => handleOpenUpload('excel')}
                  className="h-32 bg-gradient-to-br from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 flex flex-col gap-3"
                >
                  <FileSpreadsheet className="h-12 w-12" />
                  <div>
                    <div className="font-bold text-lg">ملف Excel</div>
                    <div className="text-sm opacity-80">رفع ملف .xlsx أو .xls</div>
                  </div>
                </Button>

                <Button
                  onClick={() => handleOpenUpload('image')}
                  className="h-32 bg-gradient-to-br from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 flex flex-col gap-3"
                >
                  <Camera className="h-12 w-12" />
                  <div>
                    <div className="font-bold text-lg">صورة المينيو</div>
                    <div className="text-sm opacity-80">مسح ضوئي بالـ OCR</div>
                  </div>
                </Button>
              </div>
            )}

            {/* Excel Instructions */}
            {uploadType === 'excel' && uploadStatus === 'idle' && (
              <div className="space-y-4">
                <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
                  <h3 className="font-bold mb-2 flex items-center gap-2">
                    <AlertCircle className="h-5 w-5 text-blue-400" />
                    تنسيق ملف Excel المطلوب:
                  </h3>
                  <ul className="text-sm space-y-1 text-gray-300 list-disc list-inside">
                    <li>العمود الأول: "الاسم" أو "اسم الصنف" (عربي)</li>
                    <li>العمود الثاني: "السعر" أو "Price" (رقم)</li>
                    <li>اختياري: "الفئة" (كوفي/مطعم/مغسلة) - سيتم التحديد تلقائياً إذا لم توجد</li>
                    <li>اختياري: "التصنيف الفرعي"، "الوصف"، "الصورة"</li>
                  </ul>
                </div>

                <input
                  ref={fileInputRef}
                  type="file"
                  accept=".xlsx,.xls"
                  onChange={handleExcelUpload}
                  className="hidden"
                  id="excel-upload"
                />
                <label htmlFor="excel-upload" className="block cursor-pointer">
                  <div className="w-full h-24 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 rounded-md flex items-center justify-center gap-3 transition-all">
                    <Upload className="h-8 w-8 text-white" />
                    <div className="text-white">
                      <div className="font-bold text-lg">اختر ملف Excel</div>
                      <div className="text-sm opacity-80">انقر للرفع</div>
                    </div>
                  </div>
                </label>
              </div>
            )}

            {/* Image Instructions */}
            {uploadType === 'image' && uploadStatus === 'idle' && (
              <div className="space-y-4">
                <div className="bg-purple-500/10 border border-purple-500/30 rounded-lg p-4">
                  <h3 className="font-bold mb-2 flex items-center gap-2">
                    <AlertCircle className="h-5 w-5 text-purple-400" />
                    نصائح لأفضل النتائج:
                  </h3>
                  <ul className="text-sm space-y-1 text-gray-300 list-disc list-inside">
                    <li>استخدم صورة واضحة وذات جودة عالية</li>
                    <li>تأكد من وضوح النصوص والأسعار</li>
                    <li>تجنب الظلال والانعكاسات</li>
                    <li>يفضل أن تكون الصورة مستقيمة</li>
                  </ul>
                </div>

                <input
                  ref={fileInputRef}
                  type="file"
                  accept="image/*"
                  onChange={handleImageUpload}
                  className="hidden"
                  id="image-upload"
                />
                <label htmlFor="image-upload" className="block cursor-pointer">
                  <div className="w-full h-24 bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 rounded-md flex items-center justify-center gap-3 transition-all">
                    <Camera className="h-8 w-8 text-white" />
                    <div className="text-white">
                      <div className="font-bold text-lg">التقط أو اختر صورة</div>
                      <div className="text-sm opacity-80">انقر للرفع</div>
                    </div>
                  </div>
                </label>
              </div>
            )}

            {/* Processing State */}
            {uploadStatus === 'processing' && (
              <div className="space-y-4">
                <div className="flex items-center justify-center gap-3">
                  <Loader2 className="h-8 w-8 animate-spin text-blue-400" />
                  <span className="text-lg">{uploadMessage}</span>
                </div>
                
                <div className="w-full bg-gray-700 rounded-full h-3">
                  <div
                    className="bg-gradient-to-r from-blue-500 to-cyan-500 h-3 rounded-full transition-all duration-300"
                    style={{ width: `${uploadProgress}%` }}
                  />
                </div>
                
                {previewImage && (
                  <div className="relative rounded-lg overflow-hidden border border-white/20">
                    <img src={previewImage} alt="Preview" className="w-full h-64 object-contain bg-black/20" />
                  </div>
                )}
              </div>
            )}

            {/* Success State with Preview */}
            {uploadStatus === 'success' && extractedItems.length > 0 && (
              <div className="space-y-4">
                <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4 flex items-center gap-3">
                  <CheckCircle className="h-6 w-6 text-green-400" />
                  <span className="text-green-400 font-bold">{uploadMessage}</span>
                </div>

                {previewImage && (
                  <div className="relative rounded-lg overflow-hidden border border-white/20 mb-4">
                    <img src={previewImage} alt="Preview" className="w-full h-48 object-contain bg-black/20" />
                  </div>
                )}

                <div className="max-h-96 overflow-y-auto space-y-2 bg-black/20 rounded-lg p-4">
                  <h3 className="font-bold mb-3 sticky top-0 bg-slate-900 pb-2">
                    الأصناف المستخرجة ({extractedItems.length}):
                  </h3>
                  {extractedItems.map((item, index) => (
                    <div
                      key={index}
                      className="bg-white/5 rounded-lg p-3 border border-white/10 flex items-center justify-between"
                    >
                      <div className="flex items-center gap-3 flex-1">
                        <div className={`p-2 rounded-lg bg-${getCategoryColor(item.category || 'coffee')}-500/20`}>
                          {getCategoryIcon(item.category || 'coffee')}
                        </div>
                        <div>
                          <div className="font-bold">{item.nameAr}</div>
                          <div className="text-sm text-gray-400">
                            {CATEGORIES.find(c => c.value === item.category)?.label || 'كوفي شوب'}
                            {item.subCategory && ` - ${item.subCategory}`}
                          </div>
                        </div>
                      </div>
                      <div className="text-xl font-bold text-green-400">
                        {item.price?.toFixed(2)} ر.س
                      </div>
                    </div>
                  ))}
                </div>

                <div className="flex gap-3">
                  <Button
                    onClick={resetUploadState}
                    variant="outline"
                    className="flex-1 border-white/20 text-white hover:bg-white/10"
                  >
                    <X className="h-4 w-4 mr-2" />
                    إلغاء
                  </Button>
                  <Button
                    onClick={handleSaveExtractedItems}
                    disabled={loading}
                    className="flex-1 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700"
                  >
                    {loading ? (
                      <>
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                        جاري الحفظ...
                      </>
                    ) : (
                      <>
                        <Check className="h-4 w-4 mr-2" />
                        حفظ جميع الأصناف
                      </>
                    )}
                  </Button>
                </div>
              </div>
            )}

            {/* Error State */}
            {uploadStatus === 'error' && (
              <div className="space-y-4">
                <div className="bg-red-500/10 border border-red-500/30 rounded-lg p-4 flex items-center gap-3">
                  <AlertCircle className="h-6 w-6 text-red-400" />
                  <span className="text-red-400">{uploadMessage}</span>
                </div>

                <Button
                  onClick={resetUploadState}
                  className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
                >
                  حاول مرة أخرى
                </Button>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
