'use client';

import { useRouter } from 'next/navigation';
import { useEffect, useMemo, useState } from 'react';
import {
  MessageSquare,
  Plus,
  Bot,
  ClipboardList,
  Send,
  X,
  ArrowRight,
  Phone,
  Clock,
  User,
  FileText,
  CheckCircle,
  AlertCircle,
  TrendingUp,
  Users,
  Briefcase,
  LogOut,
  LogIn,
  BarChart3,
  Trash2,
  Settings,
  Filter,
  Download,
  Upload,
  Search,
  Eye,
  Star,
  Award,
  Activity,
  Calendar,
  MapPin,
  Mail,
  Zap,
  Target,
  PieChart,
  LineChart,
  PlayCircle,
  Headphones,
  Shield,
  ChevronDown,
  ChevronUp,
  MoreVertical,
  RefreshCw,
  Archive,
  Tag,
  Sparkles
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';

type ContactStatus = 'active' | 'inactive' | 'blocked' | 'pending';
type MessageStatus = 'sent' | 'delivered' | 'read' | 'failed';
type RequestType = 'booking' | 'complaint' | 'cleaning' | 'coffee' | 'laundry';
type EmployeeStatus = 'available' | 'busy' | 'offline' | 'on-break';
type IssueStatus = 'open' | 'in-progress' | 'resolved' | 'closed';
type IssuePriority = 'low' | 'medium' | 'high' | 'urgent';

interface WhatsAppContact {
  id: string;
  name: string;
  phone: string;
  status: ContactStatus;
  lastMessage: string;
  lastMessageTime: string;
  messageCount: number;
  notes: string;
  createdAt: string;
  assignedEmployeeId?: string;
  tags: string[];
  priority: IssuePriority;
  customerStage: 'trial' | 'follow-up' | 'purchase' | 'rejected';
  satisfactionScore?: number;
}

interface WhatsAppMessage {
  id: string;
  contactId: string;
  message: string;
  status: MessageStatus;
  timestamp: string;
  direction: 'incoming' | 'outgoing';
  isBot?: boolean;
  employeeId?: string;
  employeeName?: string;
  aiGenerated?: boolean;
  attachments?: Array<{ type: string; url: string; name: string }>;
}

interface BotRequest {
  id: string;
  contactId: string;
  contactName: string;
  contactPhone: string;
  type: RequestType;
  details: Record<string, any>;
  status: 'pending' | 'processing' | 'completed';
  createdAt: string;
  completedAt?: string;
  assignedEmployeeId?: string;
}

interface Employee {
  id: string;
  name: string;
  email: string;
  phone: string;
  status: EmployeeStatus;
  role: 'admin' | 'agent' | 'supervisor';
  avatar?: string;
  stats: {
    totalChats: number;
    totalMessages: number;
    avgResponseTime: number;
    satisfactionScore: number;
    activeChats: number;
    resolvedIssues: number;
  };
  workingHours: {
    start: string;
    end: string;
    totalHoursToday: number;
  };
  lastActive: string;
}

interface Issue {
  id: string;
  contactId: string;
  title: string;
  description: string;
  status: IssueStatus;
  priority: IssuePriority;
  category: string;
  assignedEmployeeId?: string;
  createdAt: string;
  resolvedAt?: string;
  solutionSteps: string[];
  solutionVideoUrl?: string;
  relatedChatIds: string[];
  frequency: number;
}

interface AnalyticsData {
  totalContacts: number;
  activeChats: number;
  totalMessages: number;
  avgResponseTime: number;
  satisfactionScore: number;
  resolvedIssues: number;
  pendingRequests: number;
  dailyStats: Array<{ date: string; messages: number; chats: number }>;
  employeePerformance: Array<{ employeeId: string; name: string; score: number; chats: number }>;
}

const STORAGE_CONTACTS_KEY = 'whatsapp_contacts';
const STORAGE_MESSAGES_KEY = 'whatsapp_messages';
const STORAGE_BOT_REQUESTS_KEY = 'bot_requests';
const STORAGE_EMPLOYEES_KEY = 'crm_employees';
const STORAGE_ISSUES_KEY = 'crm_issues';

// بيانات الموظفين الافتراضية
const DEFAULT_EMPLOYEES: Employee[] = [
  {
    id: 'emp_001',
    name: 'أحمد محمد',
    email: 'ahmed@hotel.com',
    phone: '+201012345678',
    status: 'available',
    role: 'admin',
    avatar: '👨‍💼',
    stats: {
      totalChats: 145,
      totalMessages: 892,
      avgResponseTime: 2.3,
      satisfactionScore: 4.8,
      activeChats: 8,
      resolvedIssues: 67
    },
    workingHours: {
      start: '08:00',
      end: '17:00',
      totalHoursToday: 6.5
    },
    lastActive: new Date().toISOString()
  },
  {
    id: 'emp_002',
    name: 'فاطمة أحمد',
    email: 'fatima@hotel.com',
    phone: '+201098765432',
    status: 'busy',
    role: 'agent',
    avatar: '👩‍💼',
    stats: {
      totalChats: 98,
      totalMessages: 567,
      avgResponseTime: 3.1,
      satisfactionScore: 4.5,
      activeChats: 12,
      resolvedIssues: 45
    },
    workingHours: {
      start: '09:00',
      end: '18:00',
      totalHoursToday: 5.2
    },
    lastActive: new Date(Date.now() - 300000).toISOString()
  },
  {
    id: 'emp_003',
    name: 'محمود علي',
    email: 'mahmoud@hotel.com',
    phone: '+201156789012',
    status: 'available',
    role: 'agent',
    avatar: '👨‍💻',
    stats: {
      totalChats: 123,
      totalMessages: 734,
      avgResponseTime: 2.8,
      satisfactionScore: 4.7,
      activeChats: 5,
      resolvedIssues: 58
    },
    workingHours: {
      start: '08:30',
      end: '17:30',
      totalHoursToday: 7.0
    },
    lastActive: new Date(Date.now() - 120000).toISOString()
  }
];

// الأسئلة الشائعة والحلول
const COMMON_ISSUES = [
  {
    category: 'فنية',
    title: 'مشكلة في تسجيل الدخول',
    solution: 'امسح الكاش وحاول مرة أخرى',
    videoUrl: 'https://youtube.com/watch?v=example1'
  },
  {
    category: 'خدمة الغرف',
    title: 'تأخر التنظيف',
    solution: 'سيتم إرسال الفريق خلال 15 دقيقة',
    videoUrl: ''
  },
  {
    category: 'الفواتير',
    title: 'خطأ في الفاتورة',
    solution: 'سيتم مراجعة الفاتورة وتصحيحها',
    videoUrl: 'https://youtube.com/watch?v=example3'
  }
];

const REQUEST_TYPES: Array<{ value: RequestType; label: string; icon: string }> = [
  { value: 'booking', label: 'حجز غرفة', icon: '🏨' },
  { value: 'complaint', label: 'شكوى', icon: '⚠️' },
  { value: 'cleaning', label: 'تنظيف الغرفة', icon: '🧹' },
  { value: 'coffee', label: 'طلب كوفي', icon: '☕' },
  { value: 'laundry', label: 'غسيل الملابس', icon: '👕' }
];

const BOT_CONVERSATIONS: Record<RequestType, string[]> = {
  booking: [
    'شكراً لتواصلك معنا! 🏨 نود توفير أفضل خدماتنا لك',
    'كم عدد الأشخاص الذين ستقيمون؟',
    'ما هو نوع الغرفة المفضل لديك؟ (ستاندرد/ديلوكس/سويت)',
    'ما تاريخ دخول وخروج الإقامة؟',
    'تم تسجيل طلب الحجز بنجاح! سيتم التواصل معك قريباً ✅'
  ],
  complaint: [
    'نأسف لسماع شكواك! 😔 نحن هنا لمساعدتك',
    'يرجى تفصيل الشكوى بالتفاصيل',
    'هل تريد زيارة فريق الصيانة للغرفة؟',
    'شكراً لتعاونك! سيتم معالجة شكواك فوراً ✅'
  ],
  cleaning: [
    'خدمة التنظيف! 🧹 سعيد بطلبك',
    'ما رقم الغرفة؟',
    'ما المدة المتوقعة للانتهاء؟ (طارئ/عادي)',
    'تم تسجيل طلب التنظيف! سيصل الفريق خلال 15-30 دقيقة ✅'
  ],
  coffee: [
    'مرحباً بطلبك من الكوفي شوب! ☕',
    'ما الذي تود طلبه؟',
    'ما رقم الغرفة لتوصيل الطلب؟',
    'شكراً! سيصل طلبك خلال 15-20 دقيقة ✅'
  ],
  laundry: [
    'خدمة الغسيل المتميزة! 👕',
    'كم قطعة ملابس تريد غسلها؟',
    'هل تريد خدمة الغسيل السريع؟ (إضافي مقابل رسوم)',
    'تم استقبال طلبك! سيتم توصيل الملابس خلال 24 ساعة ✅'
  ]
};

const uid = () => `${Date.now()}_${Math.random().toString(36).slice(2, 9)}`;

function useLocalStorage<T>(key: string, initial: T) {
  const [state, setState] = useState<T>(initial);
  useEffect(() => {
    try {
      const stored = localStorage.getItem(key);
      if (stored) setState(JSON.parse(stored));
    } catch (e) {
      console.error(`Storage error: ${key}`, e);
    }
  }, [key]);
  useEffect(() => {
    try {
      localStorage.setItem(key, JSON.stringify(state));
    } catch (e) {
      console.error(`Storage error: ${key}`, e);
    }
  }, [key, state]);
  return [state, setState] as const;
}

export default function WhatsAppCRMPage() {
  const router = useRouter();
  const [contacts, setContacts] = useLocalStorage<WhatsAppContact[]>(STORAGE_CONTACTS_KEY, []);
  const [messages, setMessages] = useLocalStorage<WhatsAppMessage[]>(STORAGE_MESSAGES_KEY, []);
  const [botRequests, setBotRequests] = useLocalStorage<BotRequest[]>(STORAGE_BOT_REQUESTS_KEY, []);
  const [employees, setEmployees] = useLocalStorage<Employee[]>(STORAGE_EMPLOYEES_KEY, DEFAULT_EMPLOYEES);
  const [issues, setIssues] = useLocalStorage<Issue[]>(STORAGE_ISSUES_KEY, []);

  const [selectedContactId, setSelectedContactId] = useState<string | null>(null);
  const [selectedEmployeeId, setSelectedEmployeeId] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [messageText, setMessageText] = useState('');
  const [activeTab, setActiveTab] = useState<'messages' | 'requests' | 'employees' | 'analytics' | 'issues'>('messages');
  const [botMode, setBotMode] = useState(false);
  const [aiMode, setAiMode] = useState(false);
  const [botRequestType, setBotRequestType] = useState<RequestType>('booking');
  const [botStep, setBotStep] = useState(0);
  const [showEmployeeDetails, setShowEmployeeDetails] = useState(false);
  const [showIssueDialog, setShowIssueDialog] = useState(false);
  const [newIssue, setNewIssue] = useState({ title: '', description: '', category: '', priority: 'medium' as IssuePriority });

  const stats = useMemo(() => ({
    totalContacts: contacts.length,
    activeContacts: contacts.filter((c) => c.status === 'active').length,
    totalMessages: messages.length,
    botRequests: botRequests.length,
    pendingRequests: botRequests.filter((r) => r.status === 'pending').length,
    totalEmployees: employees.length,
    availableEmployees: employees.filter((e) => e.status === 'available').length,
    totalIssues: issues.length,
    openIssues: issues.filter((i) => i.status === 'open' || i.status === 'in-progress').length,
    avgSatisfaction: contacts.reduce((sum, c) => sum + (c.satisfactionScore || 0), 0) / contacts.filter(c => c.satisfactionScore).length || 0,
    avgResponseTime: employees.reduce((sum, e) => sum + e.stats.avgResponseTime, 0) / employees.length || 0
  }), [contacts, messages, botRequests, employees, issues]);

  const filteredContacts = useMemo(() => contacts.filter((contact) => {
    return contact.name.toLowerCase().includes(searchTerm.toLowerCase()) || contact.phone.includes(searchTerm);
  }), [contacts, searchTerm]);

  const selectedContact = selectedContactId ? contacts.find((c) => c.id === selectedContactId) : null;
  const contactMessages = selectedContactId ? messages.filter((m) => m.contactId === selectedContactId).sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()) : [];

  const handleAddContact = () => {
    const newContact: WhatsAppContact = {
      id: uid(),
      name: 'عميل جديد',
      phone: '',
      status: 'active',
      lastMessage: '',
      lastMessageTime: new Date().toISOString(),
      messageCount: 0,
      notes: '',
      createdAt: new Date().toISOString(),
      tags: [],
      priority: 'medium',
      customerStage: 'trial',
      satisfactionScore: undefined
    };
    setContacts((prev) => [...prev, newContact]);
  };

  const handleSendMessage = () => {
    if (!selectedContact || !messageText.trim()) return;

    const newMessage: WhatsAppMessage = {
      id: uid(),
      contactId: selectedContact.id,
      message: messageText,
      status: 'sent',
      timestamp: new Date().toISOString(),
      direction: 'outgoing',
      isBot: false
    };

    setMessages((prev) => [...prev, newMessage]);
    setContacts((prev) =>
      prev.map((c) =>
        c.id === selectedContact.id
          ? { ...c, lastMessage: messageText, lastMessageTime: new Date().toISOString(), messageCount: c.messageCount + 1 }
          : c
      )
    );
    setMessageText('');
  };

  const handleBotMode = (type: RequestType) => {
    setBotRequestType(type);
    setBotStep(0);
    setBotMode(true);
  };

  const handleBotResponse = () => {
    if (!selectedContact) return;
    const conversations = BOT_CONVERSATIONS[botRequestType];
    if (botStep < conversations.length) {
      const botMessage: WhatsAppMessage = {
        id: uid(),
        contactId: selectedContact.id,
        message: conversations[botStep],
        status: 'delivered',
        timestamp: new Date().toISOString(),
        direction: 'incoming',
        isBot: true
      };
      setMessages((prev) => [...prev, botMessage]);
      setBotStep((prev) => prev + 1);

      if (botStep === conversations.length - 1) {
        setTimeout(() => {
          const newRequest: BotRequest = {
            id: uid(),
            contactId: selectedContact.id,
            contactName: selectedContact.name,
            contactPhone: selectedContact.phone,
            type: botRequestType,
            details: {},
            status: 'pending',
            createdAt: new Date().toISOString()
          };
          setBotRequests((prev) => [...prev, newRequest]);
          setBotMode(false);
        }, 500);
      }
    }
  };

  const handleCloseBotMode = () => {
    setBotMode(false);
    setBotStep(0);
  };

  // دالة الذكاء الاصطناعي للردود التلقائية
  const generateAIResponse = (userMessage: string): string => {
    const lowerMsg = userMessage.toLowerCase();
    
    // كشف نوع الاستفسار
    if (lowerMsg.includes('حجز') || lowerMsg.includes('غرفة') || lowerMsg.includes('حجوزات')) {
      return '🏨 يسعدني مساعدتك في الحجز! لدينا غرف متاحة بأنواع مختلفة. ما هو نوع الغرفة المفضل لديك؟ (ستاندرد، ديلوكس، سويت)';
    }
    
    if (lowerMsg.includes('سعر') || lowerMsg.includes('كم') || lowerMsg.includes('تكلفة')) {
      return '💰 أسعارنا تبدأ من:\n• غرفة ستاندرد: 500 ريال\n• غرفة ديلوكس: 750 ريال\n• سويت: 1200 ريال\n\nهل تريد معرفة التفاصيل عن أي نوع معين؟';
    }
    
    if (lowerMsg.includes('تنظيف') || lowerMsg.includes('نظافة') || lowerMsg.includes('ترتيب')) {
      return '🧹 سيتم إرسال فريق التنظيف فوراً! ما رقم غرفتك من فضلك؟';
    }
    
    if (lowerMsg.includes('شكوى') || lowerMsg.includes('مشكلة') || lowerMsg.includes('عطل')) {
      return '😔 نأسف لحدوث ذلك! سنعمل على حل المشكلة فوراً. يرجى تفصيل المشكلة لنتمكن من مساعدتك بشكل أفضل.';
    }
    
    if (lowerMsg.includes('كوفي') || lowerMsg.includes('قهوة') || lowerMsg.includes('طعام')) {
      return '☕ مرحباً بك في الكوفي شوب! قائمتنا تشمل:\n• قهوة عربية\n• قهوة إسبريسو\n• كابتشينو\n• وجبات خفيفة\n\nماذا تود أن تطلب؟';
    }
    
    if (lowerMsg.includes('واي فاي') || lowerMsg.includes('wifi') || lowerMsg.includes('انترنت')) {
      return '📶 كلمة مرور الواي فاي:\nاسم الشبكة: SmartHost_Guest\nكلمة المرور: Welcome2024\n\nإذا واجهت أي مشكلة في الاتصال، يرجى إخبارنا!';
    }
    
    if (lowerMsg.includes('شكرا') || lowerMsg.includes('تسلم') || lowerMsg.includes('ممتاز')) {
      return '🙏 العفو! نحن سعداء بخدمتك دائماً. لا تتردد في التواصل معنا في أي وقت!';
    }
    
    // رد عام
    return '👋 أهلاً بك! أنا مساعدك الذكي. كيف يمكنني مساعدتك اليوم؟\n\n🔹 حجز غرفة\n🔹 الأسعار والعروض\n🔹 خدمة الغرف\n🔹 الكوفي شوب\n🔹 شكاوى واستفسارات';
  };

  // إرسال رسالة AI
  const handleAIResponse = () => {
    if (!selectedContact) return;
    
    const lastMessage = contactMessages[contactMessages.length - 1];
    if (!lastMessage || lastMessage.direction === 'outgoing') return;
    
    const aiResponse = generateAIResponse(lastMessage.message);
    
    const aiMessage: WhatsAppMessage = {
      id: uid(),
      contactId: selectedContact.id,
      message: aiResponse,
      status: 'sent',
      timestamp: new Date().toISOString(),
      direction: 'outgoing',
      isBot: false,
      aiGenerated: true,
      employeeId: 'ai_bot',
      employeeName: 'المساعد الذكي'
    };
    
    setMessages((prev) => [...prev, aiMessage]);
    setContacts((prev) =>
      prev.map((c) =>
        c.id === selectedContact.id
          ? { ...c, lastMessage: aiResponse, lastMessageTime: new Date().toISOString(), messageCount: c.messageCount + 1 }
          : c
      )
    );
  };

  // إنشاء مشكلة جديدة
  const handleCreateIssue = () => {
    if (!newIssue.title || !newIssue.description || !selectedContact) return;
    
    const issue: Issue = {
      id: uid(),
      contactId: selectedContact.id,
      title: newIssue.title,
      description: newIssue.description,
      status: 'open',
      priority: newIssue.priority,
      category: newIssue.category,
      assignedEmployeeId: selectedEmployeeId || undefined,
      createdAt: new Date().toISOString(),
      solutionSteps: [],
      relatedChatIds: [selectedContactId || ''],
      frequency: 1
    };
    
    setIssues((prev) => [...prev, issue]);
    setShowIssueDialog(false);
    setNewIssue({ title: '', description: '', category: '', priority: 'medium' });
  };

  // تحديث حالة الموظف
  const handleEmployeeStatusChange = (employeeId: string, newStatus: EmployeeStatus) => {
    setEmployees((prev) =>
      prev.map((e) =>
        e.id === employeeId
          ? { ...e, status: newStatus, lastActive: new Date().toISOString() }
          : e
      )
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-950 via-purple-950 to-slate-900 p-2 sm:p-6" dir="rtl">
      <div className="mx-auto max-w-[1800px] space-y-4">
        {/* الهيدر المحسّن */}
        <header className="bg-gradient-to-r from-purple-900/40 to-blue-900/40 backdrop-blur-md border border-purple-700/30 rounded-2xl p-4 sm:p-6 shadow-2xl">
          <div className="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
            <div className="space-y-2">
              <div className="flex items-center gap-3">
                <Button 
                  onClick={() => router.back()} 
                  variant="ghost" 
                  size="sm" 
                  className="text-slate-300 hover:text-white hover:bg-slate-800/50"
                >
                  <ArrowRight className="h-5 w-5" />
                </Button>
                <div className="flex items-center gap-3">
                  <div className="relative">
                    <MessageSquare className="h-10 w-10 text-green-400" />
                    <Sparkles className="h-5 w-5 text-yellow-400 absolute -top-1 -right-1 animate-pulse" />
                  </div>
                  <div>
                    <h1 className="text-2xl sm:text-4xl font-bold bg-gradient-to-r from-green-400 to-blue-400 bg-clip-text text-transparent">
                      نظام CRM المتقدم
                    </h1>
                    <p className="text-xs sm:text-sm text-slate-400">إدارة ذكية للعملاء والدعم الفني مع AI</p>
                  </div>
                </div>
              </div>
            </div>
            <div className="flex gap-2 flex-wrap">
              <Button onClick={handleAddContact} className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white shadow-lg">
                <Plus className="h-4 w-4 mr-2" /> عميل جديد
              </Button>
              <Button onClick={() => setShowIssueDialog(true)} className="bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 text-white shadow-lg">
                <AlertCircle className="h-4 w-4 mr-2" /> إبلاغ عن مشكلة
              </Button>
            </div>
          </div>
        </header>

        {/* الإحصائيات المتقدمة */}
        <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-3">
          <Card className="border-green-800/30 bg-gradient-to-br from-green-900/30 to-emerald-900/20 backdrop-blur-sm hover:scale-105 transition-transform">
            <CardHeader className="pb-2">
              <CardTitle className="text-xs text-green-300 flex items-center gap-1">
                <Users className="h-3 w-3" /> العملاء
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-2xl font-bold text-white">{stats.totalContacts}</p>
              <p className="text-xs text-green-400">نشط: {stats.activeContacts}</p>
            </CardContent>
          </Card>
          
          <Card className="border-blue-800/30 bg-gradient-to-br from-blue-900/30 to-cyan-900/20 backdrop-blur-sm hover:scale-105 transition-transform">
            <CardHeader className="pb-2">
              <CardTitle className="text-xs text-blue-300 flex items-center gap-1">
                <MessageSquare className="h-3 w-3" /> الرسائل
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-2xl font-bold text-white">{stats.totalMessages}</p>
              <p className="text-xs text-blue-400">اليوم</p>
            </CardContent>
          </Card>

          <Card className="border-purple-800/30 bg-gradient-to-br from-purple-900/30 to-pink-900/20 backdrop-blur-sm hover:scale-105 transition-transform">
            <CardHeader className="pb-2">
              <CardTitle className="text-xs text-purple-300 flex items-center gap-1">
                <Briefcase className="h-3 w-3" /> الموظفين
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-2xl font-bold text-white">{stats.totalEmployees}</p>
              <p className="text-xs text-purple-400">متاح: {stats.availableEmployees}</p>
            </CardContent>
          </Card>

          <Card className="border-amber-800/30 bg-gradient-to-br from-amber-900/30 to-orange-900/20 backdrop-blur-sm hover:scale-105 transition-transform">
            <CardHeader className="pb-2">
              <CardTitle className="text-xs text-amber-300 flex items-center gap-1">
                <AlertCircle className="h-3 w-3" /> المشاكل
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-2xl font-bold text-white">{stats.totalIssues}</p>
              <p className="text-xs text-amber-400">مفتوح: {stats.openIssues}</p>
            </CardContent>
          </Card>

          <Card className="border-rose-800/30 bg-gradient-to-br from-rose-900/30 to-red-900/20 backdrop-blur-sm hover:scale-105 transition-transform">
            <CardHeader className="pb-2">
              <CardTitle className="text-xs text-rose-300 flex items-center gap-1">
                <ClipboardList className="h-3 w-3" /> الطلبات
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-2xl font-bold text-white">{stats.botRequests}</p>
              <p className="text-xs text-rose-400">انتظار: {stats.pendingRequests}</p>
            </CardContent>
          </Card>

          <Card className="border-yellow-800/30 bg-gradient-to-br from-yellow-900/30 to-amber-900/20 backdrop-blur-sm hover:scale-105 transition-transform">
            <CardHeader className="pb-2">
              <CardTitle className="text-xs text-yellow-300 flex items-center gap-1">
                <Star className="h-3 w-3" /> التقييم
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-2xl font-bold text-white">{stats.avgSatisfaction.toFixed(1)}</p>
              <p className="text-xs text-yellow-400">من 5.0</p>
            </CardContent>
          </Card>

          <Card className="border-teal-800/30 bg-gradient-to-br from-teal-900/30 to-cyan-900/20 backdrop-blur-sm hover:scale-105 transition-transform">
            <CardHeader className="pb-2">
              <CardTitle className="text-xs text-teal-300 flex items-center gap-1">
                <Clock className="h-3 w-3" /> وقت الرد
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-2xl font-bold text-white">{stats.avgResponseTime.toFixed(1)}</p>
              <p className="text-xs text-teal-400">دقيقة</p>
            </CardContent>
          </Card>

          <Card className="border-indigo-800/30 bg-gradient-to-br from-indigo-900/30 to-blue-900/20 backdrop-blur-sm hover:scale-105 transition-transform">
            <CardHeader className="pb-2">
              <CardTitle className="text-xs text-indigo-300 flex items-center gap-1">
                <Activity className="h-3 w-3" /> النشاط
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-2xl font-bold text-white">98%</p>
              <p className="text-xs text-indigo-400">معدل الحل</p>
            </CardContent>
          </Card>
        </div>

        {/* التابات المحسّنة */}
        <div className="flex gap-2 overflow-x-auto pb-2 border-b border-purple-800/30">
          <Button 
            variant={activeTab === 'messages' ? 'default' : 'ghost'} 
            onClick={() => setActiveTab('messages')} 
            className={activeTab === 'messages' ? 'bg-gradient-to-r from-green-600 to-emerald-600 text-white shadow-lg' : 'text-slate-300 hover:text-white hover:bg-slate-800/50'}
          >
            <MessageSquare className="h-4 w-4 mr-2" /> المحادثات
          </Button>
          <Button 
            variant={activeTab === 'employees' ? 'default' : 'ghost'} 
            onClick={() => setActiveTab('employees')} 
            className={activeTab === 'employees' ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg' : 'text-slate-300 hover:text-white hover:bg-slate-800/50'}
          >
            <Users className="h-4 w-4 mr-2" /> الموظفين
          </Button>
          <Button 
            variant={activeTab === 'analytics' ? 'default' : 'ghost'} 
            onClick={() => setActiveTab('analytics')} 
            className={activeTab === 'analytics' ? 'bg-gradient-to-r from-blue-600 to-cyan-600 text-white shadow-lg' : 'text-slate-300 hover:text-white hover:bg-slate-800/50'}
          >
            <BarChart3 className="h-4 w-4 mr-2" /> التقارير
          </Button>
          <Button 
            variant={activeTab === 'issues' ? 'default' : 'ghost'} 
            onClick={() => setActiveTab('issues')} 
            className={activeTab === 'issues' ? 'bg-gradient-to-r from-amber-600 to-orange-600 text-white shadow-lg' : 'text-slate-300 hover:text-white hover:bg-slate-800/50'}
          >
            <AlertCircle className="h-4 w-4 mr-2" /> المشاكل
          </Button>
          <Button 
            variant={activeTab === 'requests' ? 'default' : 'ghost'} 
            onClick={() => setActiveTab('requests')} 
            className={activeTab === 'requests' ? 'bg-gradient-to-r from-rose-600 to-red-600 text-white shadow-lg' : 'text-slate-300 hover:text-white hover:bg-slate-800/50'}
          >
            <ClipboardList className="h-4 w-4 mr-2" /> طلبات البوت
          </Button>
        </div>

        {/* محتوى الصفحات */}
        {activeTab === 'messages' ? (
          <div className="grid grid-cols-1 gap-6 lg:grid-cols-4">
            <div className="lg:col-span-1">
              <Card className="border-slate-800 bg-slate-900/40">
                <CardHeader>
                  <CardTitle className="text-white">جهات الاتصال</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <Input 
                    placeholder="بحث..." 
                    value={searchTerm} 
                    onChange={(e) => setSearchTerm(e.target.value)} 
                    className="h-8 text-sm border-slate-700 bg-slate-950" 
                  />
                  <div className="max-h-96 overflow-y-auto space-y-2">
                    {filteredContacts.length === 0 ? (
                      <p className="text-slate-400 text-center py-4 text-xs">لا توجد جهات اتصال</p>
                    ) : (
                      filteredContacts.map((contact) => (
                        <div 
                          key={contact.id} 
                          onClick={() => setSelectedContactId(contact.id)} 
                          className={`p-2 rounded-lg border cursor-pointer transition ${
                            selectedContactId === contact.id 
                              ? 'border-green-500 bg-green-500/10' 
                              : 'border-slate-800 bg-slate-950/50 hover:border-slate-700'
                          }`}
                        >
                          <p className="text-xs font-semibold text-white truncate">{contact.name}</p>
                          <p className="text-xs text-slate-400">{contact.phone}</p>
                          <p className="text-xs text-slate-500 mt-1">{contact.messageCount} رسالة</p>
                        </div>
                      ))
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>

            <div className="lg:col-span-3">
              {selectedContact ? (
                <Card className="border-slate-800 bg-slate-900/40 h-[600px] flex flex-col">
                  <CardHeader className="border-b border-slate-800">
                    <div className="flex items-center justify-between">
                      <div>
                        <CardTitle className="text-white">{selectedContact.name}</CardTitle>
                        <CardDescription className="text-slate-400">{selectedContact.phone}</CardDescription>
                      </div>
                      {!botMode && (
                        <div className="flex gap-1 flex-wrap justify-end">
                          {REQUEST_TYPES.map((req) => (
                            <Button 
                              key={req.value} 
                              size="sm" 
                              onClick={() => handleBotMode(req.value)} 
                              className="h-8 text-xs bg-blue-600 hover:bg-blue-700 text-white"
                            >
                              <Bot className="h-3 w-3 mr-1" /> {req.icon}
                            </Button>
                          ))}
                        </div>
                      )}
                    </div>
                  </CardHeader>
                  <CardContent className="flex-1 overflow-y-auto space-y-3 py-4">
                    {contactMessages.length === 0 ? (
                      <p className="text-slate-400 text-center py-8">لا توجد رسائل</p>
                    ) : (
                      contactMessages.map((msg) => (
                        <div key={msg.id} className={`flex ${msg.direction === 'outgoing' ? 'justify-end' : 'justify-start'}`}>
                          <div className={`max-w-xs p-3 rounded-lg text-sm ${
                            msg.direction === 'outgoing' 
                              ? 'bg-green-600/20 text-green-300 border border-green-500/20' 
                              : msg.isBot
                              ? 'bg-blue-600/10 text-blue-300 border border-blue-500/30'
                              : 'bg-slate-800/50 text-slate-300 border border-slate-700/50'
                          }`}>
                            <p>{msg.message}</p>
                            <p className="text-xs mt-1 opacity-70">{new Date(msg.timestamp).toLocaleTimeString('ar-EG')}</p>
                          </div>
                        </div>
                      ))
                    )}
                  </CardContent>
                  <div className="border-t border-slate-800 p-3">
                    {botMode ? (
                      <div className="space-y-2">
                        <p className="text-xs text-slate-300 mb-2">
                          البوت: {REQUEST_TYPES.find((t) => t.value === botRequestType)?.label} ({botStep}/{BOT_CONVERSATIONS[botRequestType].length})
                        </p>
                        <div className="flex gap-2">
                          <Button 
                            onClick={handleBotResponse} 
                            size="sm" 
                            className="flex-1 bg-blue-600 hover:bg-blue-700 text-white"
                          >
                            الرد التالي
                          </Button>
                          <Button 
                            onClick={handleCloseBotMode} 
                            size="sm" 
                            variant="outline" 
                            className="border-slate-700 text-slate-300 hover:bg-slate-800"
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    ) : (
                      <div className="flex gap-2">
                        <Textarea 
                          value={messageText} 
                          onChange={(e) => setMessageText(e.target.value)} 
                          placeholder="اكتب رسالة..." 
                          rows={2} 
                          className="flex-1 border-slate-700 bg-slate-950 resize-none text-sm text-white" 
                        />
                        <Button 
                          onClick={handleSendMessage} 
                          disabled={!messageText.trim()} 
                          className="bg-green-600 hover:bg-green-700 h-full text-white"
                        >
                          <Send className="h-4 w-4" />
                        </Button>
                      </div>
                    )}
                  </div>
                </Card>
              ) : (
                <Card className="border-slate-800 bg-slate-900/40 h-[600px] flex items-center justify-center">
                  <p className="text-slate-400">اختر جهة اتصال لبدء محادثة</p>
                </Card>
              )}
            </div>
          </div>
        ) : (
          <Card className="border-slate-800 bg-slate-900/40">
            <CardHeader>
              <CardTitle className="text-white">طلبات البوت المسجلة</CardTitle>
              <CardDescription className="text-slate-400">جميع الطلبات التي تم جمعها بواسطة البوت</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full text-sm">
                  <thead>
                    <tr className="border-b border-slate-800">
                      <th className="text-right p-3 text-slate-300">الاسم</th>
                      <th className="text-right p-3 text-slate-300">الهاتف</th>
                      <th className="text-right p-3 text-slate-300">نوع الطلب</th>
                      <th className="text-right p-3 text-slate-300">الحالة</th>
                      <th className="text-right p-3 text-slate-300">التاريخ</th>
                    </tr>
                  </thead>
                  <tbody>
                    {botRequests.length === 0 ? (
                      <tr>
                        <td colSpan={5} className="p-4 text-center text-slate-400">
                          لا توجد طلبات مسجلة
                        </td>
                      </tr>
                    ) : (
                      botRequests.map((req) => (
                        <tr key={req.id} className="border-b border-slate-800 hover:bg-slate-800/20 transition">
                          <td className="p-3 text-slate-300">{req.contactName}</td>
                          <td className="p-3 text-slate-400 text-xs">{req.contactPhone}</td>
                          <td className="p-3">
                            <span className="text-sm">
                              {REQUEST_TYPES.find((t) => t.value === req.type)?.icon}
                              {' '}
                              {REQUEST_TYPES.find((t) => t.value === req.type)?.label}
                            </span>
                          </td>
                          <td className="p-3">
                            <Badge className={`${
                              req.status === 'pending' 
                                ? 'bg-amber-500/20 text-amber-300' 
                                : req.status === 'processing' 
                                ? 'bg-blue-500/20 text-blue-300' 
                                : 'bg-emerald-500/20 text-emerald-300'
                            }`}>
                              {req.status === 'pending' ? 'قيد الانتظار' : req.status === 'processing' ? 'قيد المعالجة' : 'مكتمل'}
                            </Badge>
                          </td>
                          <td className="p-3 text-slate-400">{new Date(req.createdAt).toLocaleDateString('ar-EG')}</td>
                        </tr>
                      ))
                    )}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
